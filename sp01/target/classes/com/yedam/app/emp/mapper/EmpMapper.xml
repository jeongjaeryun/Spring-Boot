<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.yedam.app.emp.mapper.EmpMapper">
  	<!-- 전체조회 -->
  	<select id="selectAllEmpInfo" resultType="EmpVO">
  		SELECT employee_id 
		  		, first_name 
		  		, last_name
		  		, email
		  		, hire_date
		  		, job_id
		  		, salary
		  		, commission_pct
		  		, manager_id
		  		, department_id
  		FROM employees 
  		ORDER BY employee_id 
  	</select>
  	
  	<!-- 단건조회 #: prepare statement $는 타입자체구분안해줌-->
  	<select id="selectEmpInfo" resultType="EmpVO">
  		SELECT employee_id 
		  		, first_name 
		  		, last_name
		  		, email
		  		, hire_date
		  		, job_id
		  		, salary
		  		, commission_pct
		  		, manager_id
		  		, department_id
  		FROM employees  
  		WHERE employee_id = #{employeeId}
  		
  		<!-- LIKE '%' || #{keyword} || '%' 
  		     LIKE '%${keyword}%'          -->
  	</select>
  	
  	<!-- 등록(등록,수정은 selectkey 사용할 수 있음) -->
  	<insert id="insertEmpInfo" parameterType="EmpVO">
  		<selectKey keyProperty="employeeId" 
		  		   resultType="int" 
		  		   order="BEFORE">
  			SELECT NVL(MAX(EMPLOYEE_ID),0) + 1
			FROM employees
  		</selectKey>
  		INSERT INTO employees
		  		(
		  			employee_id
		  			, first_name
		  			, last_name
		  			, email
		  			, hire_date
		  			, job_id
		  			<if test="salary > 0">
		  			, salary
		  			</if>
		  		)
		  	   VALUES
		  	   (
		  	   		#{employeeId}
		  	   		,#{firstName}
		  	   		,#{lastName}
		  	   		,#{email}
		  	   		<choose>
			  	   		 <when test="hireDate != null">
			  	   			,#{hireDate}
			  	   		</when>
			  	   		<otherwise>
			  	   			,sysdate
			  	   		</otherwise>
		  	   		</choose>
		  	   		,#{jobId}
		  	   		<if test="salary > 0">
		  	   		,#{salary}
		  	   		</if>
		  	   
		  	   )
  	</insert>
  	
  	<!-- 수정 : 전제조건이 있어야함, 전체데이터 전송하는 경우 -->
  	<update id="updateEmpInfo" parameterType="EmpVO">
  		UPDATE employees
  		 SET
	  		  first_name = #{firstName}
	  		  , email = #{email}
	  		  , salary = #{salary}
  		WHERE employee_id = #{employeeId}  
  	</update>
  	
  	<!-- 수정 : 변경된 데이터만 전송하는 경우 -->
  	<update id="updateEmpInfoDynamic" parameterType="EmpVO">
  		
  	
  	<!-- prefix 앞부분
  		UPDATE employees
  		 <trim prefix="set" suffixOverrides=",">
  		 	<if test="firstName != null and !firstName.equals('')">
  		 		first_name = #{firstName},
  		 	</if>
  		 	<if test="email != null and !email.equals('')">
  		 		email = #{email},
  		 	</if>
  		 	<if test="salary > 0">
  		 		salary = #{salary},
  		 	</if>
  		 </trim>
  		 WHERE employee_id = #{employeeId}
  		  -->
  		  UPDATE employees
	  		 <set>
	  		 	<if test="firstName != null and !firstName.equals('')">
	  		 		first_name = #{firstName},
	  		 	</if>
	  		 	<if test="email != null and !email.equals('')">
	  		 		email = #{email},
	  		 	</if>
	  		 	<if test="salary > 0">
	  		 		salary = #{salary},
	  		 	</if>
	  		 </set>
  		 WHERE employee_id = #{employeeId}
  	</update>
  	<!-- 삭제 -->
  	<delete id="deleteEmpInfo" parameterType="int">
  		DELETE FROM employees
  		WHERE employee_id = #{empid}
  	</delete>
  	
  </mapper>